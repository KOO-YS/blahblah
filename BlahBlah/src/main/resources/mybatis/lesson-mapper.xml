<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="lesson">
	<resultMap type="LessonVo" id="LessonMap">
		<result property="lessonNo" column="LESSON_NO" />
		<result property="lessonName" column="LESSON_NAME" />
		<result property="lessonInfo" column="LESSON_INFO" />
		<result property="lessonLevel" column="LESSON_LEVEL" />
		<result property="lessonType" column="LESSON_TYPE" />
		<result property="lessonTime" column="LESSON_TIME" />
		<result property="lessonPrice" column="LESSON_PRICE" />
		<result property="lessonTotal" column="LESSON_TOTAL" />
		<result property="tutorId" column="TUTOR_ID" />
		<result property="lessonSample" column="LESSON_SAMPLE" />
		<result property="lessonStart" column="LESSON_START" />
		<result property="memberPhoto" column="MEMBER_PHOTO" />
	</resultMap>
	<select id="selectList" parameterType="com.blah.vo.PagingVo" resultMap="LessonMap" >
		SELECT LESSON_NO,LESSON_NAME,LESSON_INFO,LESSON_LEVEL,LESSON_TYPE,LESSON_TIME,LESSON_PRICE,LESSON_TOTAL,TUTOR_ID,LESSON_SAMPLE,MEMBER_PHOTO,LESSON_START
		FROM (SELECT LESSON_NO,LESSON_NAME,LESSON_INFO,LESSON_LEVEL,LESSON_TYPE,LESSON_TIME,LESSON_PRICE,LESSON_TOTAL,TUTOR_ID,LESSON_SAMPLE,MEMBER_PHOTO,LESSON_START,
				ROW_NUMBER() OVER(ORDER BY LESSON_NO DESC) AS RNUM
			FROM LESSON
			) MP
		WHERE RNUM BETWEEN #{rowStart} AND #{rowEnd}
		ORDER BY LESSON_NO DESC
	</select>
	
	<select id="orderByRiview" parameterType="com.blah.vo.PagingVo" resultMap="LessonMap">	
		SELECT * 
		FROM (SELECT lesson.lesson_no,LESSON_NAME,LESSON_INFO,LESSON_LEVEL,LESSON_TYPE,LESSON_TIME,LESSON_PRICE,LESSON_TOTAL,TUTOR_ID,LESSON_SAMPLE,MEMBER_PHOTO,
                	ROW_NUMBER() OVER (ORDER BY RATE DESC NULLS LAST) AS PAGE
                FROM LESSON
                LEFT OUTER JOIN (SELECT LESSON_NO, avg(review_grade) RATE FROM REVIEW GROUP BY LESSON_NO ORDER BY AVG(review_grade) DESC) REVIEW_AVG
                ON LESSON.LESSON_NO = REVIEW_AVG.LESSON_NO)
		WHERE PAGE BETWEEN #{rowStart} AND #{rowEnd}
	</select>
	
	<select id="selectPopularLesson" resultMap="LessonMap">
	<![CDATA[
		SELECT *
		FROM (SELECT lesson.lesson_no,LESSON_NAME,LESSON_INFO,LESSON_LEVEL,LESSON_TYPE,LESSON_TIME,LESSON_PRICE,LESSON_TOTAL,TUTOR_ID,LESSON_SAMPLE,MEMBER_PHOTO,
                ROW_NUMBER() OVER (ORDER BY RATE DESC NULLS LAST) AS PAGE
                FROM LESSON
                LEFT OUTER JOIN (SELECT LESSON_NO, avg(review_grade) RATE FROM REVIEW GROUP BY LESSON_NO ORDER BY AVG(review_grade) DESC) REVIEW_AVG
                ON LESSON.LESSON_NO = REVIEW_AVG.LESSON_NO)
		WHERE PAGE<4
	]]>
	</select>
	
	<select id="listCount" resultType="int">
		<![CDATA[
			SELECT COUNT(LESSON_NO)
			FROM LESSON
			WHERE LESSON_NO > 0
		]]>
	</select>
	
	<select id="listReviewCount" resultType="int">
		<![CDATA[
			SELECT COUNT(distinct LESSON_NO) FROM REVIEW
		]]>
	</select>
	
	<select id="selectOne" parameterType="int" resultMap="LessonMap">
		SELECT *
		FROM LESSON
		WHERE LESSON_NO=#{lessonNo}
	</select>
	
	<insert id="insert" parameterType="LessonVo">
		INSERT INTO LESSON
		Values(lesson_seq.NEXTVAL,#{lessonName},#{lessonInfo},#{lessonLevel},#{lessonType},#{lessonTime},#{lessonPrice},4,#{tutorId},'','',#{memberPhoto})
	</insert>	
	
	<select id="getLastLessonSeq" resultType="int">
	 SELECT LESSON_SEQ.CURRVAL
     FROM DUAL
	</select>	
		
	<update id="update" parameterType="LessonVo">
		UPDATE LESSON
		SET LESSON_NAME =#{lessonName}, LESSON_INFO = #{lessonInfo}, LESSON_LEVEL= #{lessonLevel},LESSON_TYPE=#{lessonType},LESSON_TIME=#{lessonTime},LESSON_PRICE=#{lessonPrice},LESSON_TOTAL=4
		WHERE LESSON_NO = #{lessonNo}
	</update>
	
	<delete id="delete" parameterType="int">
		DELETE FROM LESSON WHERE LESSON_NO = #{lessonNo}
	</delete>
	
	<select id="searchKeyword" parameterType="String" resultMap="LessonMap">
		SELECT *
		FROM LESSON
		WHERE LESSON_NAME LIKE '%'||#{keyword}||'%' OR LESSON_INFO LIKE '%'||#{keyword}||'%' OR TUTOR_ID LIKE '%'||#{keyword}||'%'
	</select>
	
	<select id="searchLICENSE" resultMap="LessonMap" >
		SELECT * FROM LESSON
		WHERE LESSON_TYPE ='LICENSE'
	</select>
	
	<select id="searchSPEAKING" resultMap="LessonMap" >
		SELECT * FROM LESSON
		WHERE LESSON_TYPE ='SPEAKING'
	</select>
	
	<select id="searchHighLevel" resultMap="LessonMap" >
		SELECT * FROM LESSON
		WHERE LESSON_LEVEL ='상'
	</select>
	
	<select id="searchMidLevel" resultMap="LessonMap" >
		SELECT * FROM LESSON
		WHERE LESSON_LEVEL ='중'
	</select>
	
	<select id="searchLowLevel" resultMap="LessonMap" >
		SELECT * FROM LESSON
		WHERE LESSON_LEVEL ='하'
	</select>

		<resultMap type="ReviewVo" id="ReviewMap">
		<result property="reviewNo" column="review_seq" />
		<result property="memberId" column="member_id" />
		<result property="lessonNo" column="lesson_no" />
		<result property="reviewTitle" column="review_title" />
		<result property="reviewContent" column="review_content" />
		<result property="reviewDate" column="review_date" />
		<result property="reviewGrade" column="review_grade" />
		<result property="memberPhoto" column="member_photo" />
	</resultMap>

	<insert id="addReview" parameterType="ReviewVo">
		INSERT INTO REVIEW
		Values(review_seq.nextval,#{memberId},#{lessonNo},#{reviewContent},SYSDATE,#{reviewGrade},#{memberPhoto})
	</insert>
	
	<select id="selectReviewList" parameterType="String" resultMap="ReviewMap">
		SELECT A.REVIEW_SEQ, A.MEMBER_ID, A.LESSON_NO, A.REVIEW_CONTENT, A.REVIEW_DATE, A.REVIEW_GRADE, A.member_photo
		FROM REVIEW A JOIN LESSON L ON(A.LESSON_NO = L.LESSON_NO)
		WHERE TUTOR_ID=#{tutorId}
		ORDER BY review_date DESC
	</select>
	<select id="selectLatestReview" resultMap="ReviewMap">
	<![CDATA[
		SELECT REVIEW_SEQ, MEMBER_ID, LESSON_NO, REVIEW_CONTENT,REVIEW_DATE, REVIEW_GRADE,MEMBER_PHOTO
		FROM (
			SELECT REVIEW_SEQ, MEMBER_ID, LESSON_NO, REVIEW_CONTENT, REVIEW_DATE, REVIEW_GRADE,MEMBER_PHOTO
			FROM REVIEW
			ORDER BY REVIEW_DATE DESC
		) 
		WHERE rownum<=5
	]]>
	</select>	
	<select id="getReviewGrade" parameterType="String" resultType="int" >
		SELECT A.REVIEW_GRADE
		FROM REVIEW A JOIN LESSON L ON(A.LESSON_NO = L.LESSON_NO)
		WHERE TUTOR_ID=#{tutorId}
		ORDER BY review_date DESC
	</select>
	
	<delete id="deleteReview" parameterType="int">
		DELETE FROM REVIEW WHERE REVIEW_SEQ = #{reviewNo}
	</delete>
	
	<!-- 찜 -->
	<select id="chkFav" parameterType="map" resultType="int">
		SELECT count(*) 
		FROM fav
		WHERE lesson_no = #{lessonNo} AND member_id = #{memberId}
	</select>
	<delete id="deleteFav" parameterType="map">
		DELETE FROM fav 
		WHERE member_id = #{memberId} AND lesson_no = #{lessonNo}
	</delete>
	<insert id="insertFav" parameterType="map">
		INSERT INTO fav VALUES(#{memberId},#{lessonNo})
	</insert>
	
	<select id="selectFavCount" resultType="map">
		SELECT lesson_no, count(fav.member_id) cnt
		FROM lesson
		LEFT OUTER JOIN fav USING(lesson_no)
		GROUP BY lesson_no
	</select>

	<update id="updateLessonProfile" parameterType="MemberVo">
		UPDATE lesson SET MEMBER_PHOTO=#{memberPhoto} 
		WHERE tutor_id = #{memberId}
	</update>
	<update id="updateReviewProfile" parameterType="MemberVo">
		UPDATE review SET MEMBER_PHOTO=#{memberPhoto} 
		WHERE MEMBER_ID = #{memberId}
	</update>

	<select id="chkReview" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM REVIEW WHERE LESSON_NO = #{lessonNo}
	</select>
</mapper>
